#ifndef GENERATED_ASN1SCC_DATAVIEW_UNIQ_H
#define GENERATED_ASN1SCC_DATAVIEW_UNIQ_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef flag asn1SccTASTE_Boolean;

#define asn1SccTASTE_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccTASTE_Boolean_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccTASTE_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccTASTE_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccTASTE_Boolean_REQUIRED_BYTES_FOR_XER_ENCODING   44

void asn1SccTASTE_Boolean_Initialize(asn1SccTASTE_Boolean* pVal);
flag asn1SccTASTE_Boolean_IsConstraintValid(const asn1SccTASTE_Boolean* val, int* pErrCode);


typedef flag asn1SccADCS_is_stable;

#define asn1SccADCS_is_stable_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccADCS_is_stable_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccADCS_is_stable_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccADCS_is_stable_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccADCS_is_stable_REQUIRED_BYTES_FOR_XER_ENCODING   46

void asn1SccADCS_is_stable_Initialize(asn1SccADCS_is_stable* pVal);
flag asn1SccADCS_is_stable_IsConstraintValid(const asn1SccADCS_is_stable* val, int* pErrCode);


typedef enum {
    asn1Sccdetumbling = 0,
    asn1Sccnadir_pointing = 1,
    asn1Scctarget_tracking = 2,
    asn1Sccpower_maximisation = 3,
    asn1Sccboot = 4,
    asn1Sccshutdown = 5
} asn1SccOBC_orientation_mode_command;

#define asn1SccOBC_orientation_mode_command_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccOBC_orientation_mode_command_REQUIRED_BITS_FOR_ENCODING        3
#define asn1SccOBC_orientation_mode_command_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccOBC_orientation_mode_command_REQUIRED_BITS_FOR_ACN_ENCODING    3
#define asn1SccOBC_orientation_mode_command_REQUIRED_BYTES_FOR_XER_ENCODING   94

void asn1SccOBC_orientation_mode_command_Initialize(asn1SccOBC_orientation_mode_command* pVal);
flag asn1SccOBC_orientation_mode_command_IsConstraintValid(const asn1SccOBC_orientation_mode_command* val, int* pErrCode);
#ifndef ERR_asn1SccOBC_orientation_mode_command_unknown_enumeration_value 
#define ERR_asn1SccOBC_orientation_mode_command_unknown_enumeration_value		1002  /**/
#endif
#ifndef ERR_asn1SccOBC_orientation_mode_command 
#define ERR_asn1SccOBC_orientation_mode_command		1001  /**/
#endif

typedef enum {
    asn1Sccfull = 0,
    asn1Scclowpower = 1
} asn1SccOBC_profileTCS;

#define asn1SccOBC_profileTCS_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccOBC_profileTCS_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccOBC_profileTCS_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccOBC_profileTCS_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccOBC_profileTCS_REQUIRED_BYTES_FOR_XER_ENCODING   52

void asn1SccOBC_profileTCS_Initialize(asn1SccOBC_profileTCS* pVal);
flag asn1SccOBC_profileTCS_IsConstraintValid(const asn1SccOBC_profileTCS* val, int* pErrCode);
#ifndef ERR_asn1SccOBC_profileTCS_unknown_enumeration_value 
#define ERR_asn1SccOBC_profileTCS_unknown_enumeration_value		1004  /**/
#endif
#ifndef ERR_asn1SccOBC_profileTCS 
#define ERR_asn1SccOBC_profileTCS		1003  /**/
#endif

typedef enum {
    asn1Sccphase_detumbling = 0,
    asn1Sccphase_charging = 1,
    asn1Sccphase_deorbiting = 2
} asn1SccOBC_mission_phase;

#define asn1SccOBC_mission_phase_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccOBC_mission_phase_REQUIRED_BITS_FOR_ENCODING        2
#define asn1SccOBC_mission_phase_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccOBC_mission_phase_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define asn1SccOBC_mission_phase_REQUIRED_BYTES_FOR_XER_ENCODING   74

void asn1SccOBC_mission_phase_Initialize(asn1SccOBC_mission_phase* pVal);
flag asn1SccOBC_mission_phase_IsConstraintValid(const asn1SccOBC_mission_phase* val, int* pErrCode);
#ifndef ERR_asn1SccOBC_mission_phase_unknown_enumeration_value 
#define ERR_asn1SccOBC_mission_phase_unknown_enumeration_value		1002  /**/
#endif
#ifndef ERR_asn1SccOBC_mission_phase 
#define ERR_asn1SccOBC_mission_phase		1001  /**/
#endif

typedef asn1SccSint asn1SccT_Int32;

#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_XER_ENCODING   39

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* val, int* pErrCode);
#ifndef ERR_asn1SccT_Int32 
#define ERR_asn1SccT_Int32		1005  /*(-2147483648 .. 2147483647)*/
#endif

typedef asn1SccUint asn1SccT_UInt32;

#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_XER_ENCODING   41

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* val, int* pErrCode);
#ifndef ERR_asn1SccT_UInt32 
#define ERR_asn1SccT_UInt32		1006  /*(0 .. 4294967295)*/
#endif

typedef asn1SccSint asn1SccT_Int8;

#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_XER_ENCODING   37

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* val, int* pErrCode);
#ifndef ERR_asn1SccT_Int8 
#define ERR_asn1SccT_Int8		1007  /*(-128 .. 127)*/
#endif

typedef asn1SccUint asn1SccT_UInt8;

#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_XER_ENCODING   39

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* val, int* pErrCode);
#ifndef ERR_asn1SccT_UInt8 
#define ERR_asn1SccT_UInt8		1008  /*(0 .. 255)*/
#endif

typedef flag asn1SccT_Boolean;

#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_XER_ENCODING   36

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* val, int* pErrCode);


 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccTASTE_Boolean_Encode(const asn1SccTASTE_Boolean* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTASTE_Boolean_Decode(asn1SccTASTE_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTASTE_Boolean_ACN_Encode(const asn1SccTASTE_Boolean* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTASTE_Boolean_ACN_Decode(asn1SccTASTE_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccADCS_is_stable_Encode(const asn1SccADCS_is_stable* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccADCS_is_stable_Decode(asn1SccADCS_is_stable* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccADCS_is_stable_ACN_Encode(const asn1SccADCS_is_stable* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccADCS_is_stable_ACN_Decode(asn1SccADCS_is_stable* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccOBC_orientation_mode_command_Encode(const asn1SccOBC_orientation_mode_command* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccOBC_orientation_mode_command_Decode(asn1SccOBC_orientation_mode_command* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccOBC_orientation_mode_command_ACN_Encode(const asn1SccOBC_orientation_mode_command* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccOBC_orientation_mode_command_ACN_Decode(asn1SccOBC_orientation_mode_command* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccOBC_profileTCS_Encode(const asn1SccOBC_profileTCS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccOBC_profileTCS_Decode(asn1SccOBC_profileTCS* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccOBC_profileTCS_ACN_Encode(const asn1SccOBC_profileTCS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccOBC_profileTCS_ACN_Decode(asn1SccOBC_profileTCS* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccOBC_mission_phase_Encode(const asn1SccOBC_mission_phase* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccOBC_mission_phase_Decode(asn1SccOBC_mission_phase* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccOBC_mission_phase_ACN_Encode(const asn1SccOBC_mission_phase* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccOBC_mission_phase_ACN_Decode(asn1SccOBC_mission_phase* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Int32_Encode(const asn1SccT_Int32* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Int32_ACN_Encode(const asn1SccT_Int32* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Int32_ACN_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_UInt32_ACN_Encode(const asn1SccT_UInt32* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_UInt32_ACN_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Int8_Encode(const asn1SccT_Int8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Int8_ACN_Encode(const asn1SccT_Int8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Int8_ACN_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_UInt8_ACN_Encode(const asn1SccT_UInt8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_UInt8_ACN_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Boolean_ACN_Encode(const asn1SccT_Boolean* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Boolean_ACN_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}
#define ENUM_asn1Sccdetumbling	asn1Sccdetumbling
#define ENUM_asn1Sccnadir_pointing	asn1Sccnadir_pointing
#define ENUM_asn1Scctarget_tracking	asn1Scctarget_tracking
#define ENUM_asn1Sccpower_maximisation	asn1Sccpower_maximisation
#define ENUM_asn1Sccboot	asn1Sccboot
#define ENUM_asn1Sccshutdown	asn1Sccshutdown
#define ENUM_asn1Sccfull	asn1Sccfull
#define ENUM_asn1Scclowpower	asn1Scclowpower
#define ENUM_asn1Sccdetumbling	asn1Sccdetumbling
#define ENUM_asn1Scccharging	asn1Scccharging
#define ENUM_asn1Sccdeorbiting	asn1Sccdeorbiting

#endif

#endif
